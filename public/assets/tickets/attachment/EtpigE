#include "main.h"

// Global variables
char lookahead; // Current token being examined
char *input; // Input string
List *l;

int parse(char *expression, List *tokens) {
    input = expression; // Input string
    l = tokens;
    lookahead = input[0];
    E(); // Call the starting non-terminal symbol
    if (lookahead != '\0') {
        error();
    }
    return 0;
}

// Function to match the current token with the expected token
bool match(char token) {
    if (lookahead == token) {
        lookahead = *(++input);
        return true;
    }
    return false;
}

// Function to report an error
void error() {
    value_error(l);
    printf("Syntax error\n");
    exit(1);
}

// Function to implement the non-terminal symbol E
void E() {
    T();
    _E();
}

// Function to implement the non-terminal symbol E'
void _E() {
    if (match('+')) {
        T();
        _E();
    } else if (match('-')) {
        T();
        _E();
    } else {
        // Epsilon production
    }
}

// Function to implement the non-terminal symbol T
void T() {
    F();
    _T();
}

// Function to implement the non-terminal symbol T'
void _T() {
    if (match('*')) {
        F();
        _T();
    } else if (match('/')) {
        F();
        _T();
    } else {
        // Epsilon production
    }
}

// Function to implement the non-terminal symbol F
void F() {
    if (match('(')) {
        E();
        if (match(')')) {
            // Do nothing
        } else {
            error();
        }
    } else {
        num();
    }
}

// Function to implement the non-terminal symbol num
void num() {
    bool decimal = false;
    bool exponent = false;
    if (!isdigit(lookahead)) {
        error();
    }
    while (isdigit(lookahead)) {
        lookahead = *(++input);
    }
    if (lookahead == '.') {
        decimal = true;
        lookahead = *(++input);
        if (!isdigit(lookahead)) {
            error();
        }
        while (isdigit(lookahead)) {
            lookahead = *(++input);
        }
    }
    if (lookahead == 'e' || lookahead == 'E') {
        exponent = true;
        lookahead = *(++input);
        if (lookahead == '+' || lookahead == '-') {
            lookahead = *(++input);
        }
        if (!isdigit(lookahead)) {
            error();
        }
        while (isdigit(lookahead)) {
            lookahead = *(++input);
        }
    }
}